<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Design Patterns on Alioth4J&#39;s blog</title>
        <link>http://localhost:1313/categories/design-patterns/</link>
        <description>Recent content in Design Patterns on Alioth4J&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>Alioth4J</copyright>
        <lastBuildDate>Fri, 16 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/design-patterns/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Spring Boot 组件集成流程</title>
        <link>http://localhost:1313/p/spring-boot-components-integration-process/</link>
        <pubDate>Fri, 16 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/spring-boot-components-integration-process/</guid>
        <description>&lt;h2 id=&#34;通用的来源模板方法模式&#34;&gt;“通用”的来源——模板方法模式
&lt;/h2&gt;&lt;p&gt;模板方法模式（Template Method Pattern）定义了算法的骨架，并将一些步骤的具体实现延迟到子类中，以允许子类在不改变算法结构的情况下重新定义算法的某些步骤。&lt;br&gt;
在 Spring Boot 中集成组件有一个通用过程，其中每一个步骤由用户自己实现，这就是模板方法模式的应用。&lt;/p&gt;
&lt;h2 id=&#34;通用的骨架-ioc-容器&#34;&gt;&amp;ldquo;通用&amp;quot;的骨架—— IoC 容器
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;IoC 容器提供了模板方法模式中“算法的骨架”&lt;/li&gt;
&lt;li&gt;控制反转是 Spring Boot 集成其它组件的核心&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;通用集成过程&#34;&gt;通用集成过程
&lt;/h2&gt;&lt;h3 id=&#34;引入依赖&#34;&gt;引入依赖
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;pom.xml&lt;/code&gt;（Maven）或 &lt;code&gt;build.gradle&lt;/code&gt;（Gradle）文件中添加所需组件的依赖&lt;/p&gt;
&lt;h3 id=&#34;环境配置&#34;&gt;环境配置
&lt;/h3&gt;&lt;p&gt;四种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;application.properties&lt;/li&gt;
&lt;li&gt;application.yml&lt;/li&gt;
&lt;li&gt;环境变量&lt;/li&gt;
&lt;li&gt;启动选项（命令行参数）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自定义配置类&#34;&gt;自定义配置类
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;@Configuration&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;自定义组件&#34;&gt;自定义组件
&lt;/h3&gt;&lt;p&gt;// 此“组件”指：所引入依赖中的一个部件&lt;br&gt;
&lt;code&gt;@Component&lt;/code&gt; + 继承原有抽象组件，实现自定义组件&lt;/p&gt;
&lt;h3 id=&#34;注入组件调用-api&#34;&gt;注入组件，调用 API
&lt;/h3&gt;&lt;p&gt;集成完成，可以开始使用了&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;p&gt;IoC 容器既提供对组件集成的支持，又为通用的集成流程制定了骨架。&lt;br&gt;
对不同组件的集成能够有一个通用的集成过程，得益于模板方法模式。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>建造者模式构建方法参数</title>
        <link>http://localhost:1313/p/builder-parameter/</link>
        <pubDate>Sat, 25 May 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/builder-parameter/</guid>
        <description>&lt;h2 id=&#34;minio中使用建造者模式构建方法的参数&#34;&gt;MinIO中使用建造者模式构建方法的参数
&lt;/h2&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PutObjectArgs putObjectArgs = PutObjectArgs.builder()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    .bucket(BUCKET_NAME)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    .object(objectName)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    .contentType(file.getContentType())
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    .stream(file.getInputStream(), file.getSize(), ObjectWriteArgs.MIN_MULTIPART_SIZE).build();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;minioClient.putObject(putObjectArgs);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;将多个参数传入--中的问题&#34;&gt;将多个参数传入 &lt;code&gt;()&lt;/code&gt; 中的问题
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;可读性较差&lt;br&gt;
一行代码过长，分多行也不够明确&lt;br&gt;
参数对应的是什么，需要记住或者 IDE 提示&lt;/li&gt;
&lt;li&gt;可能导致错误重载&lt;br&gt;
见《Effective Java》第52条&lt;/li&gt;
&lt;li&gt;违反开闭原则&lt;br&gt;
当需要新增、删除、修改参数时，需要修改方法签名&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用建造者模式构建方法参数的优点&#34;&gt;使用建造者模式构建方法参数的优点
&lt;/h2&gt;&lt;h3 id=&#34;提供了一种规范&#34;&gt;提供了一种规范
&lt;/h3&gt;&lt;p&gt;方法入参唯一，是 &lt;code&gt;methodNameArgs&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;便于参数构建&#34;&gt;便于参数构建
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;链式调用清晰明了（编码、阅读、维护）&lt;/li&gt;
&lt;li&gt;各个参数的设置可选择，提供了灵活性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;符合开闭原则&#34;&gt;符合开闭原则
&lt;/h3&gt;&lt;p&gt;需要新增、删除、修改参数时，不需要修改方法签名，只需要修改参数对应的类&lt;/p&gt;
&lt;h2 id=&#34;好处来源于解耦&#34;&gt;好处来源于解耦
&lt;/h2&gt;&lt;p&gt;方法与方法参数之间解耦&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
